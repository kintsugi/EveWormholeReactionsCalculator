package GUI;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.UIManager;

public class About extends javax.swing.JFrame {


    public About() {
        initComponents();
        setLocationRelativeTo(null);
        BufferedImage iconImage = null;
        try {
            File imageFile = new File("data/icon.png");
            iconImage = ImageIO.read(imageFile);
        } catch(IOException e) {
            e.printStackTrace();
        }
        setIconImage(iconImage);
        textArea.setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutLabel = new javax.swing.JLabel();
        textArea = new java.awt.TextArea();
        versionLabel = new javax.swing.JLabel();
        createdByLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("About Eve Wormhole Reaction Calculator");
        setAlwaysOnTop(true);
        setType(java.awt.Window.Type.POPUP);

        aboutLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        aboutLabel.setText("Eve Wormhole Reaction Calculator");

        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textArea.setEditable(false);
        textArea.setName(""); // NOI18N
        textArea.setText("    ISK donations greatly appreciated! :) If you are so inclined\nplease send to Kaiser Freiherr. Thank you.\n\n    If you encounter a problem, have a question or, anything else you\nwould like to say, please contact me on my github page at\nhttps://github.com/KyleDanielSalter or through my email listed on that page.\n\n    Eve Wormhole Reaction Calculator is a optimzation tool for\nhybridpolymer production. It's purpose is to calculate the most\nbeneficial course of action in terms of total revenue, profit margin,\nand hours of effort. Start off by selecting a polymer and using the\nadd reaction button to add it to the output table. From there you\ncan see the calculated values to assist in your decision making.\nIf you would like to see the results of the most optimized output for\nyour circumstances, select the appropriate fields starting with \nWormhole class and then click Optimize Output.\n\n    Optimize for profit when you want the best ISK per hour of reacting,\nsuch as when you are getting your gas from a buyback or importing it.\n    Optimize for time when you want the best reaction profit to time ratio.\nIt is essentially the best profit from reacting with the lowest time commitment.\nIt does not however get you the best ISK overall.\n    Optimize for efficiency when you want the highest ISK/Mining Hour. This\nassumes you are reacting the gas, it may be more profitable to not react as you\nhave to mine a gas that a lower ISK/Hour yield.\n\n    Still early in development! While all planned features are complete\na lot of QA is needed.\n\nNotes:\n    - Profit/Hour is the Polymer value - materials value. Basically what\n      you gain from reacting.\n    - Efficiency is a generated value that is essentially the revenue\n      per hour of reacting the polymer as a ratio to the required time\n      mining those gases. This helps you decide what you reaction you\n      should pick to get the highest  ISK/hour mining for reactions. In some \n      cases, you will get higher ISK/hour not doing reactions because you have\n      the mine a lower value gas. You'll have higher ISK/hour buying plex though,\n      so take that with a grain of salt.The time gathering the minerals is ommited\n      due to its negligence in calculations. Also, you should be importing the material\n      anyways due to the low volume and refining waste.\n    - Time is reaction possible per hour of mining. i.e. You mine\n      for one hour and you have enough material for 30 reactions. The higher\n      the time value the less mining you have to do to have the reactor\n      running.\n      ");

        versionLabel.setText("Version 0.1.2");

        createdByLabel.setText("Created By: Kyle Salter");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(aboutLabel)
                                .addGap(0, 219, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createdByLabel)
                            .addComponent(versionLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(versionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createdByLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new About().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutLabel;
    private javax.swing.JLabel createdByLabel;
    private java.awt.TextArea textArea;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}
